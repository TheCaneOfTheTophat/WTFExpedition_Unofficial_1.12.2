plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

version = "v1.12.2_2.0.0"
archivesBaseName = "WTFs_Expedition_Unofficial"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

sourceSets.all { it.output.resourcesDir = it.output.classesDirs.getFiles().iterator().next() }

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            arg '-torg.spongepowered.asm.launch.MixinTweaker'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            arg '-torg.spongepowered.asm.launch.MixinTweaker'
        }
    }

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    implementation fg.deobf("org.teamrtg:RTG:1.12.2-7.3.2:")
    compileOnly fg.deobf("exterminatorjeff.undergroundbiomes:UndergroundBiomesConstructs:1.12-1.3.14:")

    annotationProcessor 'org.spongepowered:mixin:0.8.3:processor'
    embed('org.spongepowered:mixin:0.8.3') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
}

mixin {
    add sourceSets.main, 'mixin.wtfexpedition.refmap.json'
    config 'mixin.wtfexpedition.json'
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        mergetool
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching('mcmod.info') {
        expand 'version': project.version
    }
}

jar {
    classifier('slim')

    dependsOn('mixinJar')

    manifest.attributes(
            'ForceLoadAsMod': 'true',
            'FMLCorePluginContainsFMLMod': 'true',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': '0'
    )
}

task mixinJar(type: Jar) {
    from zipTree(tasks.jar.archivePath)

    from {
        configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude 'LICENSE.txt', 'META-INF/MANIFSET.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF'
    }

    manifest = jar.manifest
}

jar.finalizedBy('reobfJar')